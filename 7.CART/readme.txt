用人骑车的速度来预测人的智商。
打算采用模型树回归的方法来实现，通过一元一次方程模型来建立树回归，最后进行后剪枝

思路整理：
首先建立解析器，输入文件名，输出二维矩阵。
然后建立节点选择器，选取最佳节点进行二分
然后建立误差计算器，先用线性对数据点作逼近，然后计算误差
然后建立建树器，可以通过递归来建立树
然后建立预剪枝器，储存预剪枝的条件
然后建立后剪枝器，用来后剪枝
最后建立模型解析器，通过上面建立的模型树回归对测试数据做预测、

写代码时觉察到的决策树算法的缺点和改进点：
1.感觉这些数据做起来爽，但是真正应用时，数据不会这么少吧，那算法还是需要改很多的。
2.线性回归中对y标准化能消除常数项。但是所有的标准化到最后预测的时候都要记得还原
3，做简单回归分析的时候可以不对数据矩阵进行标准化，只需对结果中心化即可。只有加入正则项之后才需要标准化
4.后剪枝是利用测试集剪枝

学到的python代码：
1.numpy中的linalg.matrix_rank(a)可以计算矩阵a的秩
2.numpy中的corrcoef(yhat,y,rowvar=0)可以求解相关系数，其中yhat是预测值，y是目标变量的实际值。
3.matrix数据转化为list，set数据用什么？python3中list,set不行
4.a.sort(1)对矩阵的每个特征排序，是的，对所有特征都排序；a.sort(1)对每一行分别进行排序
5.（重要）data.A可以把mat矩阵转化为array；   data=data[argsort(data.A[:,0])] 是对data的第一列进行排序
6.a1=re.match(r'(<(\d+))|(>=(\d+))',treevalue).groups()正则表达式筛选，match,search,groups,group
7.字典不能通过直接赋值来改变values,需要用dict.update(dict2)












